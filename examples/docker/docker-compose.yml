# 虚拟化容器化技术演示环境
# 这个Docker Compose配置展示了虚拟化容器化技术的实际应用

version: '3.8'

services:
  # 虚拟化监控服务
  virtualization-monitor:
    build:
      context: ../
      dockerfile: docker/Dockerfile.rust
    container_name: virtualization-monitor
    ports:
      - "8080:8080"
    environment:
      - RUST_LOG=info
      - MONITORING_INTERVAL=30
      - MAX_HISTORY_SIZE=1000
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    networks:
      - virtualization-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 容器编排服务
  container-orchestrator:
    build:
      context: ../
      dockerfile: docker/Dockerfile.go
    container_name: container-orchestrator
    ports:
      - "8081:8080"
    environment:
      - GO_LOG_LEVEL=info
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config:/app/config
      - ./logs:/app/logs
    networks:
      - virtualization-network
    depends_on:
      - docker-daemon
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 语义验证服务
  semantic-validator:
    build:
      context: ../
      dockerfile: docker/Dockerfile.python
    container_name: semantic-validator
    ports:
      - "8082:8080"
    environment:
      - PYTHON_DEBUG=0
      - LOG_LEVEL=info
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
      - ./models:/app/models
    networks:
      - virtualization-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Docker守护进程（用于容器编排器）
  docker-daemon:
    image: docker:dind
    container_name: docker-daemon
    privileged: true
    ports:
      - "2376:2376"
    environment:
      - DOCKER_TLS_CERTDIR=/certs
    volumes:
      - docker-certs-ca:/certs/ca
      - docker-certs-client:/certs/client
      - docker-data:/var/lib/docker
    networks:
      - virtualization-network
    restart: unless-stopped

  # 性能监控服务
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - virtualization-network
    restart: unless-stopped

  # 可视化仪表板
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - virtualization-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # 日志聚合服务
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - virtualization-network
    restart: unless-stopped

  # 日志收集服务
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: logstash
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logstash/config:/usr/share/logstash/config
    networks:
      - virtualization-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # 日志可视化服务
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - virtualization-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # 负载均衡器
  nginx:
    image: nginx:alpine
    container_name: nginx-lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - virtualization-network
    depends_on:
      - virtualization-monitor
      - container-orchestrator
      - semantic-validator
    restart: unless-stopped

  # 数据库服务
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=virtualization_db
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin123
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - virtualization-network
    restart: unless-stopped

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis-data:/data
    networks:
      - virtualization-network
    restart: unless-stopped

  # 消息队列服务
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - virtualization-network
    restart: unless-stopped

  # 测试客户端
  test-client:
    build:
      context: ../
      dockerfile: docker/Dockerfile.test
    container_name: test-client
    environment:
      - API_BASE_URL=http://nginx-lb
      - TEST_MODE=integration
    volumes:
      - ./tests:/app/tests
      - ./reports:/app/reports
    networks:
      - virtualization-network
    depends_on:
      - nginx
    restart: "no"

  # 开发工具
  dev-tools:
    image: alpine:latest
    container_name: dev-tools
    volumes:
      - .:/workspace
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /workspace
    command: tail -f /dev/null
    networks:
      - virtualization-network
    restart: unless-stopped

# 网络配置
networks:
  virtualization-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷配置
volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  rabbitmq-data:
    driver: local
  docker-certs-ca:
    driver: local
  docker-certs-client:
    driver: local
  docker-data:
    driver: local
