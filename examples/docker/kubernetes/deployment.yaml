# Kubernetes部署配置
# 用于部署虚拟化容器化技术演示环境

apiVersion: v1
kind: Namespace
metadata:
  name: virtualization-demo
  labels:
    name: virtualization-demo
    purpose: demonstration

---
# 虚拟化监控服务部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: virtualization-monitor
  namespace: virtualization-demo
  labels:
    app: virtualization-monitor
    component: monitoring
spec:
  replicas: 2
  selector:
    matchLabels:
      app: virtualization-monitor
  template:
    metadata:
      labels:
        app: virtualization-monitor
        component: monitoring
    spec:
      containers:
      - name: virtualization-monitor
        image: virtualization-monitor:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: RUST_LOG
          value: "info"
        - name: MONITORING_INTERVAL
          value: "30"
        - name: MAX_HISTORY_SIZE
          value: "1000"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: config
          mountPath: /app/config
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: config
        configMap:
          name: virtualization-monitor-config
      - name: logs
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux

---
# 容器编排服务部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: container-orchestrator
  namespace: virtualization-demo
  labels:
    app: container-orchestrator
    component: orchestration
spec:
  replicas: 2
  selector:
    matchLabels:
      app: container-orchestrator
  template:
    metadata:
      labels:
        app: container-orchestrator
        component: orchestration
    spec:
      serviceAccountName: container-orchestrator
      containers:
      - name: container-orchestrator
        image: container-orchestrator:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: GO_LOG_LEVEL
          value: "info"
        - name: DOCKER_HOST
          value: "unix:///var/run/docker.sock"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: docker-sock
          mountPath: /var/run/docker.sock
        - name: config
          mountPath: /app/config
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock
      - name: config
        configMap:
          name: container-orchestrator-config
      - name: logs
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux

---
# 语义验证服务部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: semantic-validator
  namespace: virtualization-demo
  labels:
    app: semantic-validator
    component: validation
spec:
  replicas: 1
  selector:
    matchLabels:
      app: semantic-validator
  template:
    metadata:
      labels:
        app: semantic-validator
        component: validation
    spec:
      containers:
      - name: semantic-validator
        image: semantic-validator:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: PYTHON_DEBUG
          value: "0"
        - name: LOG_LEVEL
          value: "info"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: config
          mountPath: /app/config
        - name: logs
          mountPath: /app/logs
        - name: models
          mountPath: /app/models
      volumes:
      - name: config
        configMap:
          name: semantic-validator-config
      - name: logs
        emptyDir: {}
      - name: models
        configMap:
          name: semantic-models
      nodeSelector:
        kubernetes.io/os: linux

---
# Prometheus监控部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: virtualization-demo
  labels:
    app: prometheus
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        component: monitoring
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
          name: http
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=200h'
        - '--web.enable-lifecycle'
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-data
          mountPath: /prometheus
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: prometheus-pvc
      nodeSelector:
        kubernetes.io/os: linux

---
# Grafana可视化部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: virtualization-demo
  labels:
    app: grafana
    component: visualization
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        component: visualization
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secret
              key: admin-password
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
      volumes:
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      nodeSelector:
        kubernetes.io/os: linux

---
# 数据库部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: virtualization-demo
  labels:
    app: postgres
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: "virtualization_db"
        - name: POSTGRES_USER
          value: "admin"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-init
        configMap:
          name: postgres-init
      nodeSelector:
        kubernetes.io/os: linux

---
# Redis缓存部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: virtualization-demo
  labels:
    app: redis
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        component: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --requirepass
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc
      nodeSelector:
        kubernetes.io/os: linux

---
# 负载均衡器部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-lb
  namespace: virtualization-demo
  labels:
    app: nginx-lb
    component: loadbalancer
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx-lb
  template:
    metadata:
      labels:
        app: nginx-lb
        component: loadbalancer
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
          name: http
        - containerPort: 443
          name: https
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: nginx-ssl
          mountPath: /etc/nginx/ssl
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: nginx-ssl
        secret:
          secretName: nginx-ssl
      nodeSelector:
        kubernetes.io/os: linux

---
# 水平Pod自动扩缩容器
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: virtualization-monitor-hpa
  namespace: virtualization-demo
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: virtualization-monitor
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: container-orchestrator-hpa
  namespace: virtualization-demo
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: container-orchestrator
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
