import os
from pathlib import Path
from datetime import datetime

ROOT = Path(__file__).resolve().parents[1]
ARCHIVE = ROOT / "_archive"

HEADER = """# {month} ÂΩíÊ°£ÊñáÊ°£Á¥¢Âºï

> **ÂΩíÊ°£ÁîüÊàêÊó∂Èó¥**: {now}

---

## üìã ÁõÆÂΩï

- [{month} ÂΩíÊ°£ÊñáÊ°£Á¥¢Âºï](#{anchor})
  - [üìã ÁõÆÂΩï](#-ÁõÆÂΩï)
  - [1. ÂΩíÊ°£ËØ¥Êòé](#1-ÂΩíÊ°£ËØ¥Êòé)
  - [2. ÊñáÊ°£ÂàÜÁ±ª](#2-ÊñáÊ°£ÂàÜÁ±ª)
    - [2.1 ÊØèÊó•Â∑•‰ΩúÊÄªÁªì (daily_summaries/)](#21-ÊØèÊó•Â∑•‰ΩúÊÄªÁªì-daily_summaries)
    - [2.2 ÈáåÁ®ãÁ¢ëÊä•Âëä (milestone_reports/)](#22-ÈáåÁ®ãÁ¢ëÊä•Âëä-milestone_reports)
    - [2.3 ‰∏ìÈ¢òÊÄªÁªì (project_summaries/)](#23-‰∏ìÈ¢òÊÄªÁªì-project_summaries)
  - [3. ÁªüËÆ°](#3-ÁªüËÆ°)
"""

BODY_EXPLAIN = """
---

## 1. ÂΩíÊ°£ËØ¥Êòé

Êú¨ÁõÆÂΩïÂåÖÂê´ {month} ÊúüÈó¥ÁöÑÂéÜÂè≤ÊÄªÁªì‰∏éÊä•ÂëäÔºåÊåâÁ±ªÂûãÂàÜÁ±ªÂ≠òÊîæÔºö

```text
{ym}/
‚îú‚îÄ‚îÄ daily_summaries/
‚îú‚îÄ‚îÄ milestone_reports/
‚îî‚îÄ‚îÄ project_summaries/
```

---

## 2. ÊñáÊ°£ÂàÜÁ±ª

### 2.1 ÊØèÊó•Â∑•‰ΩúÊÄªÁªì (daily_summaries/)

{daily_list}

### 2.2 ÈáåÁ®ãÁ¢ëÊä•Âëä (milestone_reports/)

{milestone_list}

### 2.3 ‰∏ìÈ¢òÊÄªÁªì (project_summaries/)

{project_list}

---

## 3. ÁªüËÆ°

- ÊØèÊó•Â∑•‰ΩúÊÄªÁªì: {daily_count} ‰∏™
- ÈáåÁ®ãÁ¢ëÊä•Âëä: {milestone_count} ‰∏™
- ‰∏ìÈ¢òÊÄªÁªì: {project_count} ‰∏™
- ÊÄªËÆ°: {total_count} ‰∏™
"""


def list_files(dir_path: Path) -> list[str]:
    if not dir_path.exists():
        return []
    return [f.name for f in sorted(dir_path.glob("*.md"))]


def md_list(items: list[str]) -> str:
    if not items:
        return "(Á©∫)"
    return "\n".join(f"- {name}" for name in items)


def generate_for_month(month_dir: Path):
    ym = month_dir.name
    month = f"{ym[:4]}Âπ¥{ym[5:]}Êúà"
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    anchor = f"{ym}Âπ¥ÂΩíÊ°£ÊñáÊ°£Á¥¢Âºï"  # ‰ªÖ‰Ωú‰∏∫Âç†‰Ωç

    daily = list_files(month_dir / "daily_summaries")
    milestone = list_files(month_dir / "milestone_reports")
    project = list_files(month_dir / "project_summaries")

    daily_count = len(daily)
    milestone_count = len(milestone)
    project_count = len(project)
    total_count = daily_count + milestone_count + project_count

    readme = HEADER.format(month=f"{ym} {month}", now=now, anchor=anchor)
    readme += BODY_EXPLAIN.format(
        month=f"{ym} {month}", ym=ym,
        daily_list=md_list(daily),
        milestone_list=md_list(milestone),
        project_list=md_list(project),
        daily_count=daily_count,
        milestone_count=milestone_count,
        project_count=project_count,
        total_count=total_count,
    )

    (month_dir / "README.generated.md").write_text(readme, encoding="utf-8")
    print(f"Generated: {month_dir / 'README.generated.md'}")


def main():
    if not ARCHIVE.exists():
        print("_archive directory not found.")
        return
    for month_dir in sorted(ARCHIVE.iterdir()):
        if not month_dir.is_dir():
            continue
        # expect YYYY-MM
        if len(month_dir.name) == 7 and month_dir.name[4] == '-':
            generate_for_month(month_dir)


if __name__ == "__main__":
    main()
