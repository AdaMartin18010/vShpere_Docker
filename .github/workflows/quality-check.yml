name: Documentation Quality Check

on:
  pull_request:
    paths:
      - '**.md'
      - '.github/workflows/quality-check.yml'
  push:
    branches:
      - main
    paths:
      - '**.md'
  workflow_dispatch:  # 允许手动触发

jobs:
  markdown-lint:
    name: Markdown Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install markdownlint-cli
        run: npm install -g markdownlint-cli

      - name: Run markdownlint
        run: |
          markdownlint '**/*.md' \
            --ignore node_modules \
            --ignore .github \
            --config .markdownlint.json || true

      - name: Generate lint report
        if: always()
        run: |
          echo "## Markdown Lint Results" > lint-report.md
          markdownlint '**/*.md' \
            --ignore node_modules \
            --ignore .github \
            --config .markdownlint.json >> lint-report.md || true

      - name: Upload lint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: markdown-lint-report
          path: lint-report.md

  link-check:
    name: Link Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install markdown-link-check
        run: npm install -g markdown-link-check

      - name: Check links in README
        continue-on-error: true
        run: |
          markdown-link-check README.md \
            --config .markdown-link-check.json \
            --progress

      - name: Check links in all markdown files
        continue-on-error: true
        run: |
          find . -name '*.md' \
            -not -path './node_modules/*' \
            -not -path './.github/*' \
            -exec markdown-link-check {} \
            --config .markdown-link-check.json \;

      - name: Generate link check report
        if: always()
        run: |
          echo "## Link Check Results" > link-check-report.md
          echo "Checked at: $(date)" >> link-check-report.md
          find . -name '*.md' \
            -not -path './node_modules/*' \
            -not -path './.github/*' \
            -exec markdown-link-check {} \
            --config .markdown-link-check.json \; \
            >> link-check-report.md || true

      - name: Upload link check report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: link-check-report
          path: link-check-report.md

  spell-check:
    name: Spell Checking
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install cspell
        run: npm install -g cspell

      - name: Run spell check
        continue-on-error: true
        run: |
          cspell "**/*.md" \
            --config .cspell.json \
            --no-progress \
            --show-suggestions

      - name: Generate spell check report
        if: always()
        run: |
          echo "## Spell Check Results" > spell-check-report.md
          cspell "**/*.md" \
            --config .cspell.json \
            --no-progress \
            >> spell-check-report.md || true

      - name: Upload spell check report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spell-check-report
          path: spell-check-report.md

  format-check:
    name: Format Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check file encoding
        run: |
          echo "Checking file encodings..."
          find . -name '*.md' -type f -exec file {} \; | grep -v "UTF-8" || echo "All files are UTF-8"

      - name: Check for trailing whitespace
        run: |
          echo "Checking for trailing whitespace..."
          ! find . -name '*.md' -type f -exec grep -l ' $' {} \;

      - name: Check for tabs
        run: |
          echo "Checking for tabs (should use spaces)..."
          ! find . -name '*.md' -type f -exec grep -l $'\t' {} \;

      - name: Check file size
        run: |
          echo "Checking for large files (>5MB)..."
          find . -name '*.md' -type f -size +5M -ls || echo "No large files found"

      - name: Check line length
        continue-on-error: true
        run: |
          echo "Checking for very long lines (>500 chars)..."
          find . -name '*.md' -type f -exec awk 'length>500 {print FILENAME":"NR": line too long ("length" chars)"; exit 1}' {} \;

  content-validation:
    name: Content Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install pyyaml requests beautifulsoup4

      - name: Validate YAML frontmatter
        continue-on-error: true
        run: |
          python scripts/validate_frontmatter.py

      - name: Check code block syntax
        continue-on-error: true
        run: |
          python scripts/validate_code_blocks.py

      - name: Validate version consistency
        continue-on-error: true
        run: |
          python scripts/check_version_consistency.py

  generate-report:
    name: Generate Quality Report
    runs-on: ubuntu-latest
    needs: [markdown-lint, link-check, spell-check, format-check, content-validation]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: quality-reports

      - name: Generate comprehensive report
        run: |
          cat << 'EOF' > quality-report.md
          # Documentation Quality Report
          
          **Generated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}
          
          ---
          
          ## Summary
          
          | Check | Status |
          |-------|--------|
          | Markdown Lint | ${{ needs.markdown-lint.result }} |
          | Link Check | ${{ needs.link-check.result }} |
          | Spell Check | ${{ needs.spell-check.result }} |
          | Format Check | ${{ needs.format-check.result }} |
          | Content Validation | ${{ needs.content-validation.result }} |
          
          ---
          
          ## Detailed Reports
          
          EOF
          
          # 合并所有报告
          find quality-reports -name '*.md' -exec cat {} \; >> quality-report.md

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: quality-comprehensive-report
          path: quality-report.md

      - name: Comment PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('quality-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

      - name: Fail if critical issues found
        if: |
          needs.markdown-lint.result == 'failure' ||
          needs.link-check.result == 'failure'
        run: |
          echo "Critical quality issues found!"
          exit 1

