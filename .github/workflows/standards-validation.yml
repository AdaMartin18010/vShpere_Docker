name: 标准符合性验证

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每周一 00:00 UTC运行
    - cron: '0 0 * * 1'
  workflow_dispatch:  # 允许手动触发

jobs:
  markdown-lint:
    name: Markdown格式检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: Markdown Lint
        uses: nosborn/github-action-markdown-cli@v3.3.0
        with:
          files: .
          config_file: .markdownlint.json
          ignore_files: '_archive/'
  
  link-check:
    name: 链接有效性检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 链接检查
        uses: lycheeverse/lychee-action@v1.9.0
        with:
          args: --verbose --no-progress './**/*.md' --exclude-path '_archive'
          fail: false  # 链接失效不阻塞构建
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      
      - name: 上传报告
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: link-check-report
          path: ./lychee/out.md
  
  yaml-lint:
    name: YAML语法检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: 安装yamllint
        run: pip install yamllint
      
      - name: YAML Lint
        run: yamllint . || true
  
  shellcheck:
    name: Shell脚本检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './scripts'
          severity: warning
  
  kubernetes-validate:
    name: Kubernetes资源验证
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 安装kubeval
        run: |
          curl -L https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xz
          sudo mv kubeval /usr/local/bin/
      
      - name: 验证Kubernetes YAML
        run: |
          find . \( -name "*.yaml" -o -name "*.yml" \) -type f | \
          grep -E "(examples|manifests|k8s)" | \
          xargs -I {} kubeval --strict {} || true
  
  dockerfile-lint:
    name: Dockerfile最佳实践检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: "**/Dockerfile*"
          failure-threshold: warning
  
  compliance-check:
    name: 标准符合性文档检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 检查必需文档
        run: |
          echo "检查标准符合性文档..."
          
          # 检查STANDARDS_COMPLIANCE.md
          if [ -f "STANDARDS_COMPLIANCE.md" ]; then
            echo "✅ STANDARDS_COMPLIANCE.md 存在"
          else
            echo "❌ STANDARDS_COMPLIANCE.md 缺失"
            exit 1
          fi
          
          # 检查STANDARDS_COMPLIANCE_MATRIX.md
          if [ -f "STANDARDS_COMPLIANCE_MATRIX.md" ]; then
            echo "✅ STANDARDS_COMPLIANCE_MATRIX.md 存在"
          else
            echo "❌ STANDARDS_COMPLIANCE_MATRIX.md 缺失"
            exit 1
          fi
          
          # 检查引用规范
          if [ -f "_docs/standards/CITATION_GUIDE.md" ]; then
            echo "✅ 引用规范指南存在"
          else
            echo "❌ 引用规范指南缺失"
            exit 1
          fi
          
          # 检查文档模板
          if [ -f "_docs/standards/DOCUMENT_TEMPLATE.md" ]; then
            echo "✅ 文档模板存在"
          else
            echo "❌ 文档模板缺失"
            exit 1
          fi
          
          echo "✅ 所有必需文档检查通过"
  
  standards-validation:
    name: 综合标准验证
    runs-on: ubuntu-latest
    needs: [markdown-lint, yaml-lint, shellcheck, compliance-check]
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 运行标准验证脚本
        run: |
          chmod +x scripts/validate_standards.sh
          ./scripts/validate_standards.sh || true
      
      - name: 生成徽章
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Standards validation completed"
          # 这里可以集成shields.io或其他徽章服务
  
  report:
    name: 生成验证报告
    runs-on: ubuntu-latest
    needs: [markdown-lint, link-check, yaml-lint, shellcheck, kubernetes-validate, dockerfile-lint, compliance-check]
    if: always()
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 生成报告
        run: |
          mkdir -p validation-reports
          cat <<EOF > validation-reports/summary.md
          # 标准符合性验证报告
          
          **生成时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')
          **提交**: ${{ github.sha }}
          **分支**: ${{ github.ref }}
          
          ## 验证结果
          
          - Markdown格式: ${{ needs.markdown-lint.result }}
          - 链接有效性: ${{ needs.link-check.result }}
          - YAML语法: ${{ needs.yaml-lint.result }}
          - Shell脚本: ${{ needs.shellcheck.result }}
          - Kubernetes资源: ${{ needs.kubernetes-validate.result }}
          - Dockerfile: ${{ needs.dockerfile-lint.result }}
          - 符合性文档: ${{ needs.compliance-check.result }}
          
          ## 详细报告
          
          请查看各个job的详细输出。
          EOF
          
          cat validation-reports/summary.md
      
      - name: 上传报告
        uses: actions/upload-artifact@v3
        with:
          name: validation-report
          path: validation-reports/
      
      - name: 评论PR (如果是PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('validation-reports/summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            })

